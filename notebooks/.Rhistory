ylim(0,1.1) +
scale_y_continuous("", breaks=seq(0,1,0.2))
pCSS # c
pCFA<- ggplot(g_frac_accuracy) +  # correlation fractional accuracy
geom_bar(aes(x= median_of_depth_bin, y= fraction_amount/number_of_parent_samples, fill= hit_type), stat="identity") +
scale_fill_manual("Call", values= plot_colors) +
scale_x_continuous("UMEND reads (million)", breaks=outlier_results_x_breaks, labels=outlier_results_x_labels) +
ylab("Fraction of correlated background samples") +
theme(
#   axis.text.y  = element_blank(), # un comment when I've fixed the max = 0.8 issue
#   axis.ticks.y  = element_blank()
)  +
theme(legend.position="none")
pCFA
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(knitr)
library(forcats)
red_cap_file="data/redcap_qc_parent_sample_data_downloaded_via_API_2019-01-25_12.00.52AM.txt"
redcap_info_raw=read_tsv(red_cap_file) %>%
dplyr::filter(!(THid=="THR32_0941_S01" & is.na(disease))) # stupid duplication
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(knitr)
library(forcats)
red_cap_file="data/redcap_qc_parent_sample_data_downloaded_via_API_2019-01-25_12.00.52AM.txt"
redcap_info_raw=read_tsv(red_cap_file) %>%
dplyr::filter(!(THid=="THR32_0941_S01" & is.na(disease))) # stupid duplication
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(knitr)
library(forcats)
red_cap_file="data/redcap_qc_parent_sample_data_downloaded_via_API_2019-01-25_12.00.52AM.txt"
redcap_info_raw=read_tsv(red_cap_file) %>%
dplyr::filter(!(THid=="THR32_0941_S01" & is.na(disease))) # stupid duplication
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(knitr)
library(forcats)
red_cap_file="../data/redcap_qc_parent_sample_data_downloaded_via_API_2019-01-25_12.00.52AM.txt"
redcap_info_raw=read_tsv(red_cap_file) %>%
dplyr::filter(!(THid=="THR32_0941_S01" & is.na(disease))) # stupid duplication
redcap_info_raw_min <- redcap_info_raw  %>%
select(THid, disease, seq_length , froffp, libPrep,
histology, age_at_dx, project, source_from_redcap,
site_donor_id, repo, datafrom)
eval_sample_TH_ids <- read_tsv("../data/parent_sample_metadata.tsv")[,1:2]
parent_publication_ids <- read_tsv("../data/parent_pub_ids.txt", col_names=c("Eval_ID", "pub_ID"))
allCountsRaw =read_tsv(file.path( "../data/read_survey_results.tsv"), col_types = cols())
set.seed(1)
read_counts <-allCountsRaw %>%
rename(
total_reads=total_sequences,
uniquely_mapped_reads=Uniquely_mapped_read_count,
uniquely_mapped_non_duplicate_reads= Uniquely_mapped_non_duplicate_read_count
) %>%
mutate(
pct_UMEND= UMEND/total_reads,
Percent_duplicates= 1-(uniquely_mapped_non_duplicate_reads/uniquely_mapped_reads)
)  %>%
dplyr::filter(
sample_id %in% eval_sample_TH_ids$treehouse_id
)
redcap_info_no_eval_id <-left_join(redcap_info_raw_min, 	read_counts, by=c("THid"="sample_id"))
parent_sample_info  <- left_join(
eval_sample_TH_ids,
redcap_info_no_eval_id,
by=c(treehouse_id= "THid"))
## format data for editing
parent_sample_info2 <- parent_sample_info  %>% select(-total_reads, -uniquely_mapped_reads, -uniquely_mapped_non_duplicate_reads, -UMEND, -Percent_duplicates, -pct_UMEND, everything())
parent_sample_info_for_edits<-gather(parent_sample_info2, key, value, -treehouse_id)
# one time, or if input changes
# write_tsv(parent_sample_info_for_edits, "../data/parent_sample_info_for_edit_planning.tsv")
### INCORPORATE REVISIONS
revisions_to_add=read_tsv("../data/manual_revisions_for_parent_data.txt")
updated_parent_sample_info_disordered <- parent_sample_info_for_edits %>%
left_join(revisions_to_add, by=c("treehouse_id", "key", "value"="old_value")) %>%
mutate(value2=ifelse(is.na(new_value), value, new_value)) %>%
select(-value, -new_value, -caveat) %>%
spread(key, value2)
updated_parent_sample_info_partial <- updated_parent_sample_info_disordered [,colnames(parent_sample_info)] %>% arrange(sample_id)
updated_parent_sample_info_pub_names <- updated_parent_sample_info_partial %>%
mutate(sample_id=parent_publication_ids$pub_ID[match(sample_id, parent_publication_ids$Eval_ID)])
### INCORPORATE CURATED SEQ PROJECT INFO
curated_parent_sample_sequencing_projects<- read_tsv("../data/curated_parent_sample_sequencing_projects.txt")
updated_parent_sample_info<-right_join (updated_parent_sample_info_pub_names,
curated_parent_sample_sequencing_projects,
by=c("treehouse_id"="Thid"))
updated_parent_sample_info <- type_convert(updated_parent_sample_info)
### EDIT Column titles
### EDIT Column titles
updated_parent_sample_info <- updated_parent_sample_info %>%
rename(
sample=sample_id,
treehouse_ID=treehouse_id,
age=age_at_dx,
sequence_length=seq_length,
percent_UMEND=pct_UMEND,
UM_reads=uniquely_mapped_reads,
UMND_reads=uniquely_mapped_non_duplicate_reads,
UMEND_reads=UMEND,
`sample ID in project`=`sample id in project`
)
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
test_col_names=c("site_donor_id", "repo", "UMEND",
"uniquely_mapped_non_duplicate_reads", "pct_UMEND", "Percent_duplicates",
"project origin", "sample id in project", "notes -")
make_nice_column_names_for_output<-function(some_column_names=test_col_names) {
unlist(lapply(some_column_names, function(x) simpleCap(gsub("_", " ", x))))
}
updated_parent_sample_info_for_output<-updated_parent_sample_info
colnames(updated_parent_sample_info_for_output)=make_nice_column_names_for_output(colnames(updated_parent_sample_info_for_output))
kabel_digits=2
updated_parent_sample_info_for_output  %>%
select(Sample, `Treehouse ID`, Disease, Age)  %>%
knitr::kable(caption = "Clinical information", digits=1)
#updated_parent_sample_info  %>% select(sample_id, treehouse_id, seq_length,total_reads,   uniquely_mapped_reads, uniquely_mapped_non_duplicate_reads, UMEND, pct_UMEND, Percent_duplicates)
updated_parent_sample_info_for_output %>%
select(Sample, `Sequence Length`, `Total Reads`, `UM Reads`, `UMND Reads`, `UMEND Reads`, `Percent UMEND`, `Percent Duplicates`) %>%
knitr::kable(caption = "Sequencing_statistics", digits=3, format.args=list(big.mark = ','))
origin_of_seq_data<-updated_parent_sample_info_for_output %>%
#  select(Sample, `Project Origin`, `Project Information`, `Sample ID In Project`)
select(Sample, `Project Origin`, `Disease`, `Sequence Length`, `Percent Duplicates`) %>%
mutate(`Percent Duplicates`=sprintf("%0.2f",`Percent Duplicates`))
knitr::kable(origin_of_seq_data, digits=3, format.args=list(big.mark = ','))
origin_of_seq_data<-updated_parent_sample_info_for_output %>%
#  select(Sample, `Project Origin`, `Project Information`, `Sample ID In Project`)
select(Sample, Source=`Project Origin`, `Disease`, `Sequence Length`, `Percent Duplicates`) %>%
mutate(`Percent Duplicates`=sprintf("%0.2f",`Percent Duplicates`))
#  select(sample_id, seq_length,total_reads,  Percent_duplicates) %>%
# origin_of_seq_data %>%  knitr::kable(caption = "Origin of sequence data", digits=3, format.args=list(big.mark = ','))
knitr::kable(origin_of_seq_data, digits=3, format.args=list(big.mark = ','))
origin_of_seq_data %>%  write_tsv("../data/table1_info_on_seq_data.tsv")
#knitr::opts_knit$set(root.dir = "~/Documents/Dropbox/ucsc/projects/gitCode/calculations for umend_qc_publication/")
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(knitr)
library(forcats)
neighbor_sens_spec_raw <- read_tsv("../data/outlier_accuracy_stats_combo_for_pub.tsv") %>% mutate(is_outlier_in_subset = TRUE)
outlier_sens_spec_raw <- read_tsv("../data/neighbor_accuracy_stats_combo_for_pub.tsv") %>% mutate(is_outlier_in_subset = TRUE) %>%
mutate(bin_median=ifelse(bin_median==0, 1, bin_median))
read_tsv("../data/neighbor_accuracy_stats_combo_for_pub.tsv") %>% mutate(is_outlier_in_subset = TRUE)
outlier_sens_spec_raw <- read_tsv("../data/neighbor_accuracy_stats_combo_for_pub.tsv") %>% mutate(is_outlier_in_subset = TRUE) %>%
mutate(bin_median=ifelse(median_of_depth_bin==0, 1, median_of_depth_bin))
neighbor_sens_spec_raw
outlier_sens_spec_raw
outlier_sens_spec_raw <- read_tsv("../data/neighbor_accuracy_stats_combo_for_pub.tsv") %>%
mutate(is_outlier_in_subset = TRUE) %>%
mutate(bin_median=ifelse(bin_median==0, 1, bin_median))
?read_tsv
outlier_sens_spec_raw <- read_tsv("../data/neighbor_accuracy_stats_combo_for_pub.tsv") %>%
dplyr::rename(bin_median=median_of_depth_bin) %>%
mutate(is_outlier_in_subset = TRUE) %>%
mutate(bin_median=ifelse(bin_median==0, 1, bin_median))
sens_spec <- left_join(outlier_sens_spec_raw, neighbor_sens_spec_raw, by="bin_median") %>%
select(-contains("is_outlier_in_subset"))
colnames(sens_spec)  =c("UMEND reads (million)", "Outlier sensitivity", "Outlier specificity",  "Correlation sensitivity", "Correlation specificity")
sens_spec %>% mutate_at(vars(-contains('UMEND')), funs(sprintf("%0.4f",.)))  %>%  write_tsv("../figures/sens_spec_table_for_pub.tsv")
sens_spec
neighbor_sens_spec_raw <- read_tsv("../data/neighbor_accuracy_stats_combo_for_pub.tsv") %>% mutate(is_outlier_in_subset = TRUE)
outlier_sens_spec_raw <- read_tsv("../data/outlier_accuracy_stats_combo_for_pub.tsv") %>%
dplyr::rename(bin_median=median_of_depth_bin) %>%
mutate(is_outlier_in_subset = TRUE) %>%
mutate(bin_median=ifelse(bin_median==0, 1, bin_median))
neighbor_sens_spec_raw <- read_tsv("../data/neighbor_accuracy_stats_combo_for_pub.tsv") %>%
dplyr::rename(bin_median=median_of_depth_bin)
neighbor_sens_spec_raw
neighbor_sens_spec_raw <- read_tsv("../data/neighbor_accuracy_stats_combo_for_pub.tsv") %>%
dplyr::rename(bin_median=median_of_depth_bin)
outlier_sens_spec_raw <- read_tsv("../data/outlier_accuracy_stats_combo_for_pub.tsv")
mutate(bin_median=ifelse(bin_median==0, 1, bin_median))
read_tsv("../data/outlier_accuracy_stats_combo_for_pub.tsv")
read_tsv("../data/neighbor_accuracy_stats_combo_for_pub.tsv")
neighbor_sens_spec_raw <- read_tsv("../data/neighbor_accuracy_stats_combo_for_pub.tsv") %>%
dplyr::rename(bin_median=median_of_depth_bin) %>%
mutate(bin_median=ifelse(bin_median==0, 1, bin_median))
outlier_sens_spec_raw <- read_tsv("../data/outlier_accuracy_stats_combo_for_pub.tsv")
sens_spec <- left_join(outlier_sens_spec_raw, neighbor_sens_spec_raw, by="bin_median")
colnames(sens_spec)  =c("UMEND reads (million)", "Outlier sensitivity", "Outlier specificity",  "Correlation sensitivity", "Correlation specificity")
sens_spec %>% mutate_at(vars(-contains('UMEND')), funs(sprintf("%0.4f",.)))
outlier_sens_spec_raw
read_tsv("../data/outlier_accuracy_stats_combo_for_pub.tsv")
read_tsv("../data/outlier_accuracy_stats_combo_for_pub.tsv")
read_tsv("../data/outlier_accuracy_stats_combo_for_pub.tsv")
neighbor_sens_spec_raw <- read_tsv("../data/neighbor_accuracy_stats_combo_for_pub.tsv") %>%
dplyr::rename(bin_median=median_of_depth_bin) %>%
mutate(bin_median=ifelse(bin_median==0, 1, bin_median))
outlier_sens_spec_raw <- read_tsv("../data/outlier_accuracy_stats_combo_for_pub.tsv")
sens_spec <- left_join(outlier_sens_spec_raw, neighbor_sens_spec_raw, by="bin_median")
colnames(sens_spec)  =c("UMEND reads (million)", "Outlier sensitivity", "Outlier specificity",  "Correlation sensitivity", "Correlation specificity")
sens_spec %>% mutate_at(vars(-contains('UMEND')), funs(sprintf("%0.4f",.)))
sens_spec %>% mutate_at(vars(-contains('UMEND')), funs(sprintf("%0.4f",.)))  %>%  write_tsv("../figures/sens_spec_table_for_pub.tsv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/data/projects/gitCode/calculations_for_umend_qc_publication/notebooks")
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(cowplot)
library(gridGraphics)
library(RColorBrewer)
library(viridis)
library(ggrepel)
v9_clinical <- read_tsv("https://xena.treehouse.gi.ucsc.edu/download/TreehousePEDv9_clinical_metadata.2019-03-15.tsv")
nrow(v9_clinical)
read_counts <- read_tsv("../data/read_counts.txt",
col_names = c("sample_id", "measurement", "read_count")) %>%
mutate(parent_id = gsub("_est.*$", "", sample_id),
seed = gsub("^.*seed_", "", sample_id))
read_counts
unique(read_counts$sample_id)
cat(unique(read_counts$sample_id), file="../data/subsample_ids.txt", sep = "\n")
library(tidyverse); citation("tidyverse")
library(forcats); citation("forcats")
library(knitr); citation("knitr")
read_counts=read_tsv(
"../data/read_counts.txt",
col_names=c("sample_id", "measurement", "read_count"))
UMEND_read_counts <- read_counts %>%
mutate(
target_UMEND_count=as.numeric(gsub("^.*_est([0-9]*)M_.*$", "\\1", sample_id)),
parent_id=gsub("_est.*$", "", sample_id),
measurement=factor(measurement, levels=c("total_sequences",
"Uniquely_mapped_read_count","Uniquely_mapped_non_duplicate_read_count",  "UMEND"))
) %>%
filter(
measurement =="UMEND"
) %>%
select(-measurement) %>%
rename(UMEND = read_count)
library(readr)
library(tidyr)
library(dplyr)
library(knitr)
library(forcats)
raw_parent_sample_data_source <- read_tsv("../data/parent_sample_data_source.tsv")
knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_knit$set(root.dir = "~/Documents/Dropbox/ucsc/projects/gitCode/drafts_of_umend_qc_publication/")
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(gridGraphics)
library(RColorBrewer)
library(viridis)
library(ggrepel)
library(cowplot)
parent_sample_data$`Treehouse ID`
selected_parent_samples <- tibble(THid = parent_sample_data$`Treehouse ID`)
parent_sample_data <- read_tsv("../data/parent_sample_data_source.tsv") %>% rename(pub_ID = publication_id)
min_correlation=0.875
neighbor_filter="same_disease"
f_make_supporting_plots=FALSE
this_truth_definition="found_in_3_of_4_biggest_subsets"
truth_definitions=c("found_in_at_least_half_the_subsets",
"found_in_the_deepest_subset",
"found_in_3_of_4_biggest_subsets"
)
#knitr::opts_knit$set(root.dir = "~/Documents/Dropbox/ucsc/projects/gitCode/calculations for umend_qc_publication/")
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(knitr)
library(forcats)
library(janitor)
library(grid)
library(gtable)
library(gridExtra)
this_bin_width=4
#first_degree_results_with_self_correlations <-
first_degree_results_with_corrs_gt_875 <-
read_tsv("../data/correlated_samples.txt",
col_types=cols()
) %>%
rename(neighbor_sample = first_degree_neighbor_sample) %>%
mutate(
sample_is_neighbor_in_subset = TRUE,
parent_sample=gsub("_est.*$", "", focus_sample),
target_UMEND_count=as.numeric(gsub("^.*_est([0-9]*)M_.*$", "\\1", focus_sample))
) %>%
group_by(parent_sample, neighbor_sample)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(knitr)
library(forcats)
library(cowplot)
gene_abundances_for_bin_detail <- read_tsv("../data/gene_abundances_for_bin_detail.tsv")
highlighted_gene_abundances_raw <- read_tsv("../data/highlighted_gene_abundances.tsv")
read_counts_raw <- read_tsv("../data/read_counts.txt",
col_names = c("sample_id", "measurement", "read_count"))
# add information about total reads at data points
highlight_expression <- left_join(highlighted_gene_abundances_raw,
read_counts_raw %>%
dplyr::filter(measurement == "total_sequences") %>%
select(-measurement) %>%
select(total_reads = read_count, everything()),
by = "sample_id")
grid_size_major <- 0.08
grid_size_minor <- 0.05
expression_label_data <- highlight_expression %>%
dplyr::filter(
parent_id == "TH_Eval_014",
target_UMEND_count == max(target_UMEND_count)) %>%
mutate(vjust_val = ifelse(gene %in% c("JAK2", "TP53"), 2, -0.5))
# max_x=20+10*ceiling(max(expression_label_data$max_depth)/1e7)
max_x <- 10 * ceiling(max(expression_label_data$total_reads) / 1E7)
p <- ggplot(highlight_expression) +
geom_line(aes(x = total_reads / 1e6, y = expression, group = gene, color = gene)) +
geom_point(aes(x = total_reads / 1e6, y = expression, group = gene, color = gene), size = 0.5)
# shape= within_accuracy_threshold_of_deepest_val),  size=3, fill="white", alpha=.8 # line opts were , size=1.5, alpha=.7
p2 <- p +
geom_text(data = expression_label_data,
aes(x = max_x - 5,
y = expression,
label = gene,
color = gene,
vjust = vjust_val),
size = 4, hjust = 1) #+
#expand_limits(x = max(expression_label_data$max_depth) / 1e6+5)
p3 <- p2 +
facet_wrap(~publication_id, nrow = 1) +
background_grid(major = "xy",
minor = "x",
colour.major = "black",
colour.minor = grey(0.75),
size.major = grid_size_major,
size.minor = grid_size_minor) +
theme(axis.line = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0)) +
scale_shape_manual(values = c(22, 16))  +
scale_color_brewer(guide = FALSE, palette = "Set1") +
expand_limits(y = 0, x = max_x) +
ylab("Expression (log2(TPM+1))") +
xlab("Total reads (million)") +
ggtitle("A")
p3
ids_to_plot <- c("S1", "S2")
small_highlight_expression <- subset(highlight_expression, publication_id %in% ids_to_plot)
p <- ggplot(small_highlight_expression) +
geom_line(aes(x = total_reads / 1e6,
y = expression,
group = gene,
color = gene)) +
geom_point(aes(x = total_reads / 1e6,
y = expression,
group = gene,
color = gene),
size = 0.5)  # shape= within_accuracy_threshold_of_deepest_val),  size=3, fill="white", alpha=.8 # line opts were , size=1.5, alpha=.7
p2 <- p +
geom_text(data = expression_label_data,
aes(x = 1 + total_reads / 1e6,
y = expression,
label = gene,
color = gene,
vjust = vjust_val),
size = 4,
hjust = 1) #+
#expand_limits(x = max(expression_label_data$max_depth) / 1e6 + 5)
small_p3 <- p2 +
facet_wrap(~publication_id, nrow = 1) +
background_grid(major = "xy",
minor = "x",
colour.major = "black",
colour.minor = grey(0.75),
size.major = grid_size_major,
size.minor = grid_size_minor) +
theme(axis.line = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0)) +
scale_shape_manual(values = c(22, 16))  +
scale_color_brewer(guide = FALSE, palette = "Set1") +
expand_limits(y = 0, x = max_x) +
ylab("Expression (log2(TPM+1))") +
xlab("Total reads (million)") +
ggtitle("A")
small_p3
half_size_of_expr_bin <- 0.02
gene_expression_levels <- c(1.5, 3.5, 5.5)
n_gene_sample_combos <- gene_abundances_for_bin_detail %>%
filter(target_UMEND_count == max(target_UMEND_count)) %>%
group_by(parent_id, expression_bin) %>%
summarize(n_genes_per_boxplot = n())
unique(n_gene_sample_combos$n_genes_per_boxplot)
pretty_expression <-  left_join(gene_abundances_for_bin_detail,
read_counts_raw %>%
dplyr::filter(measurement == "total_sequences") %>%
select(-measurement) %>%
select(total_reads = read_count, everything()),
by = "sample_id")
# dummy data to make the y axis as big as i want them
dummy <- bind_rows(c(median_expr = 1.5, expression = 5),
c(median_expr = 1.5, expression = 0),
c(median_expr = 3.5, expression = 6),
c(median_expr = 3.5, expression = 1),
c(median_expr = 5.5, expression = 3),
c(median_expr = 5.5, expression = 8)) %>%
mutate(publication_id = "S1", # it doesn't matter which since they're all using the same y axis
total_reads = 10 * 1e6)
pretty_expression$median_expr_f <- factor(as.character(pretty_expression$expression_bin),
levels = rev(as.character(gene_expression_levels)))
dummy$median_expr_f <- factor(as.character(dummy$median_expr),
levels = rev(as.character(gene_expression_levels)))
hline_dummy <- as_tibble(expand.grid(median_expr = unique(dummy$median_expr),
publication_id = unique(pretty_expression$publication_id))) %>%
mutate(median_expr_f = factor(as.character(median_expr)))
plot_title = "Range of expression of genes with similar expression"
pBin <- ggplot(pretty_expression) +
geom_hline(data = hline_dummy, aes(yintercept = median_expr),
size = 0.25, color = "#6699cc") +
geom_boxplot(aes(x = total_reads / 1e6,
y = expression,
group = paste(expression_bin, median_of_depth_bin)), #color=label,
outlier.size = 0.5, width = 3) +
xlab("Total reads (million)") +
ylab("Expression (log2(TPM+1))") +
theme(legend.position = "none") +
facet_grid(median_expr_f ~ publication_id, scales = "free_y") +
geom_blank(data = dummy, aes(x = total_reads / 1e6, y = expression)) +
scale_y_continuous(breaks = seq(0, 10, by = 2)) +
ggtitle("B")
# ggtitle(plot_title)
pBin2 <- pBin +
background_grid(major = "xy",
minor = "x",
colour.major = "black",
colour.minor = grey(0.75),
size.major = grid_size_major,
size.minor = grid_size_minor) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust = 0)) +
scale_x_continuous(breaks = seq(0, max_x, 25))
# minor_breaks = seq(5, max_x, 5)) +
# scale_x_continuous(breaks = seq(0, max_x, 25),
# minor_breaks = seq(5, max_x, 5)) +
pBin2
# ggsave(paste0("figures_and_tables/", plot_title, ".png"), plot=pBin, width=7, height=7)
# dummy data to make the y axis as big as i want them
dummy <- bind_rows(c(expression_bin = 1.5, expression = 5),
c(expression_bin = 1.5, expression = 0),
c(expression_bin = 3.5, expression = 6),
c(expression_bin = 3.5, expression = 1),
c(expression_bin = 5.5, expression = 3),
c(expression_bin = 5.5, expression = 8)) %>%
mutate(publication_id = "S1", # it doesn't matter which since they're all using the same y axis
total_reads = 10 * 1e6)
hline_dummy <- as_tibble(expand.grid(expression_bin = unique(dummy$expression_bin),
publication_id = unique(pretty_expression$publication_id))) %>%
mutate(
expression_bin_f = factor(as.character(expression_bin), as.character(gene_expression_levels))
)
pretty_expression$expression_bin_f <- factor(as.character(pretty_expression$expression_bin),
levels = as.character(gene_expression_levels))
dummy$expression_bin_f <- factor(as.character(dummy$expression_bin),
levels = as.character(gene_expression_levels))
hline_dummy$expression_bin_f <- factor(hline_dummy$expression_bin_f,
levels = as.character(gene_expression_levels))
ids_to_plot <- c("S1", "S2")
small_pretty_expression <- subset(pretty_expression, publication_id %in% ids_to_plot)
small_hline_dummy <- subset(hline_dummy, publication_id %in% ids_to_plot)
plot_title <- "Range of expression of genes with similar expression"
pBin <- ggplot(small_pretty_expression) +
geom_hline(data = small_hline_dummy, aes(yintercept = expression_bin),
size = 0.25, color = "#6699cc") + # color = "grey") +
geom_boxplot(aes(x = total_reads / 1e6,
y = expression,
group = paste(expression_bin, median_of_depth_bin)), #color=label,
outlier.size = 0.25, width = 3) +
# geom_hline(data=hline_dummy, aes(yintercept=expression_bin), size=0.5, linetype="dotted", color="blue") +
xlab("Total reads (million)") +
ylab("Expression (log2(TPM+1))") +
theme(legend.position = "none") +
facet_grid(expression_bin_f ~ publication_id, scales = "free_y") +
geom_blank(data = dummy, aes(x = total_reads / 1e6, y = expression)) +
scale_y_continuous(breaks = seq(0, 10, by = 2)) +
ggtitle("B")
# ggtitle(plot_title)
pSmallBin2 <- pBin +
background_grid(major = "xy",
minor = "x",
colour.major = "black",
colour.minor = grey(0.75),
size.major = grid_size_major,
size.minor = grid_size_minor) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust = 0)) +
scale_x_continuous(breaks = seq(0, max_x, 25))
pSmallBin2
